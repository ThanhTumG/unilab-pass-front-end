/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuthenticationRequest } from '../models';
// @ts-ignore
import type { CustomApiResponseAuthenticationResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseIntrospectResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseVerificationCodeResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseVoid } from '../models';
// @ts-ignore
import type { ErrorApiResponse } from '../models';
// @ts-ignore
import type { IntrospectRequest } from '../models';
// @ts-ignore
import type { LogoutRequest } from '../models';
// @ts-ignore
import type { RefreshTokenRequest } from '../models';
// @ts-ignore
import type { VerificationCodeRequest } from '../models';
/**
 * AuthenticationControllerApi - axios parameter creator
 * @export
 */
export const AuthenticationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Log in to the application
         * @param {AuthenticationRequest} authenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate: async (authenticationRequest: AuthenticationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationRequest' is not null or undefined
            assertParamExists('authenticate', 'authenticationRequest', authenticationRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check the validity of the token
         * @param {IntrospectRequest} introspectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspect: async (introspectRequest: IntrospectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'introspectRequest' is not null or undefined
            assertParamExists('introspect', 'introspectRequest', introspectRequest)
            const localVarPath = `/auth/introspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(introspectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (logoutRequest: LogoutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequest' is not null or undefined
            assertParamExists('logout', 'logoutRequest', logoutRequest)
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get refresh token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshTokenRequest: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refreshToken', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify email with verification code
         * @param {VerificationCodeRequest} verificationCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCode: async (verificationCodeRequest: VerificationCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationCodeRequest' is not null or undefined
            assertParamExists('verifyCode', 'verificationCodeRequest', verificationCodeRequest)
            const localVarPath = `/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verificationCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationControllerApi - functional programming interface
 * @export
 */
export const AuthenticationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Log in to the application
         * @param {AuthenticationRequest} authenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(authenticationRequest: AuthenticationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseAuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate(authenticationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.authenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check the validity of the token
         * @param {IntrospectRequest} introspectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async introspect(introspectRequest: IntrospectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseIntrospectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.introspect(introspectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.introspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(logoutRequest: LogoutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(logoutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get refresh token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseAuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify email with verification code
         * @param {VerificationCodeRequest} verificationCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCode(verificationCodeRequest: VerificationCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseVerificationCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyCode(verificationCodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.verifyCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationControllerApi - factory interface
 * @export
 */
export const AuthenticationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Log in to the application
         * @param {AuthenticationControllerApiAuthenticateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(requestParameters: AuthenticationControllerApiAuthenticateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseAuthenticationResponse> {
            return localVarFp.authenticate(requestParameters.authenticationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check the validity of the token
         * @param {AuthenticationControllerApiIntrospectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspect(requestParameters: AuthenticationControllerApiIntrospectRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseIntrospectResponse> {
            return localVarFp.introspect(requestParameters.introspectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {AuthenticationControllerApiLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(requestParameters: AuthenticationControllerApiLogoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseVoid> {
            return localVarFp.logout(requestParameters.logoutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get refresh token
         * @param {AuthenticationControllerApiRefreshTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(requestParameters: AuthenticationControllerApiRefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseAuthenticationResponse> {
            return localVarFp.refreshToken(requestParameters.refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify email with verification code
         * @param {AuthenticationControllerApiVerifyCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCode(requestParameters: AuthenticationControllerApiVerifyCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseVerificationCodeResponse> {
            return localVarFp.verifyCode(requestParameters.verificationCodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authenticate operation in AuthenticationControllerApi.
 * @export
 * @interface AuthenticationControllerApiAuthenticateRequest
 */
export interface AuthenticationControllerApiAuthenticateRequest {
    /**
     * 
     * @type {AuthenticationRequest}
     * @memberof AuthenticationControllerApiAuthenticate
     */
    readonly authenticationRequest: AuthenticationRequest
}

/**
 * Request parameters for introspect operation in AuthenticationControllerApi.
 * @export
 * @interface AuthenticationControllerApiIntrospectRequest
 */
export interface AuthenticationControllerApiIntrospectRequest {
    /**
     * 
     * @type {IntrospectRequest}
     * @memberof AuthenticationControllerApiIntrospect
     */
    readonly introspectRequest: IntrospectRequest
}

/**
 * Request parameters for logout operation in AuthenticationControllerApi.
 * @export
 * @interface AuthenticationControllerApiLogoutRequest
 */
export interface AuthenticationControllerApiLogoutRequest {
    /**
     * 
     * @type {LogoutRequest}
     * @memberof AuthenticationControllerApiLogout
     */
    readonly logoutRequest: LogoutRequest
}

/**
 * Request parameters for refreshToken operation in AuthenticationControllerApi.
 * @export
 * @interface AuthenticationControllerApiRefreshTokenRequest
 */
export interface AuthenticationControllerApiRefreshTokenRequest {
    /**
     * 
     * @type {RefreshTokenRequest}
     * @memberof AuthenticationControllerApiRefreshToken
     */
    readonly refreshTokenRequest: RefreshTokenRequest
}

/**
 * Request parameters for verifyCode operation in AuthenticationControllerApi.
 * @export
 * @interface AuthenticationControllerApiVerifyCodeRequest
 */
export interface AuthenticationControllerApiVerifyCodeRequest {
    /**
     * 
     * @type {VerificationCodeRequest}
     * @memberof AuthenticationControllerApiVerifyCode
     */
    readonly verificationCodeRequest: VerificationCodeRequest
}

/**
 * AuthenticationControllerApi - object-oriented interface
 * @export
 * @class AuthenticationControllerApi
 * @extends {BaseAPI}
 */
export class AuthenticationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Log in to the application
     * @param {AuthenticationControllerApiAuthenticateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public authenticate(requestParameters: AuthenticationControllerApiAuthenticateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).authenticate(requestParameters.authenticationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check the validity of the token
     * @param {AuthenticationControllerApiIntrospectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public introspect(requestParameters: AuthenticationControllerApiIntrospectRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).introspect(requestParameters.introspectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {AuthenticationControllerApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public logout(requestParameters: AuthenticationControllerApiLogoutRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).logout(requestParameters.logoutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get refresh token
     * @param {AuthenticationControllerApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public refreshToken(requestParameters: AuthenticationControllerApiRefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).refreshToken(requestParameters.refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify email with verification code
     * @param {AuthenticationControllerApiVerifyCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public verifyCode(requestParameters: AuthenticationControllerApiVerifyCodeRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).verifyCode(requestParameters.verificationCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

