/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseEventGuestRespond } from '../models';
// @ts-ignore
import type { CustomApiResponseListEventGuestRespond } from '../models';
// @ts-ignore
import type { CustomApiResponseString } from '../models';
// @ts-ignore
import type { EventGuestCreationRequest } from '../models';
// @ts-ignore
import type { EventGuestKey } from '../models';
// @ts-ignore
import type { EventGuestUpdateRequest } from '../models';
/**
 * EventGuestControllerApi - axios parameter creator
 * @export
 */
export const EventGuestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add guests into event
         * @param {string} eventId 
         * @param {Array<EventGuestCreationRequest>} eventGuestCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListEventGuests: async (eventId: string, eventGuestCreationRequest: Array<EventGuestCreationRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('addListEventGuests', 'eventId', eventId)
            // verify required parameter 'eventGuestCreationRequest' is not null or undefined
            assertParamExists('addListEventGuests', 'eventGuestCreationRequest', eventGuestCreationRequest)
            const localVarPath = `/event/{eventId}/guests`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventGuestCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all guests of event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventGuest: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEventGuest', 'eventId', eventId)
            const localVarPath = `/event/{eventId}/guests/delete/all`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete guests of event
         * @param {EventGuestKey} eventGuestKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventGuest1: async (eventGuestKey: EventGuestKey, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventGuestKey' is not null or undefined
            assertParamExists('deleteEventGuest1', 'eventGuestKey', eventGuestKey)
            const localVarPath = `/event/guests/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventGuestKey, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all guests of event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListEventGuests: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getListEventGuests', 'eventId', eventId)
            const localVarPath = `/event/{eventId}/guests`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get guest Ã¬nfo of event
         * @param {string} eventId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListEventGuests1: async (eventId: string, guestId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getListEventGuests1', 'eventId', eventId)
            // verify required parameter 'guestId' is not null or undefined
            assertParamExists('getListEventGuests1', 'guestId', guestId)
            const localVarPath = `/event/{eventId}/guests/{guestId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"guestId"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update guests of event
         * @param {EventGuestUpdateRequest} eventGuestUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventGuest: async (eventGuestUpdateRequest: EventGuestUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventGuestUpdateRequest' is not null or undefined
            assertParamExists('updateEventGuest', 'eventGuestUpdateRequest', eventGuestUpdateRequest)
            const localVarPath = `/event/guests/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventGuestUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventGuestControllerApi - functional programming interface
 * @export
 */
export const EventGuestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventGuestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add guests into event
         * @param {string} eventId 
         * @param {Array<EventGuestCreationRequest>} eventGuestCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addListEventGuests(eventId: string, eventGuestCreationRequest: Array<EventGuestCreationRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addListEventGuests(eventId, eventGuestCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventGuestControllerApi.addListEventGuests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete all guests of event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventGuest(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventGuest(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventGuestControllerApi.deleteEventGuest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete guests of event
         * @param {EventGuestKey} eventGuestKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventGuest1(eventGuestKey: EventGuestKey, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventGuest1(eventGuestKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventGuestControllerApi.deleteEventGuest1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all guests of event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListEventGuests(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseListEventGuestRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListEventGuests(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventGuestControllerApi.getListEventGuests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get guest Ã¬nfo of event
         * @param {string} eventId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListEventGuests1(eventId: string, guestId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseEventGuestRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListEventGuests1(eventId, guestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventGuestControllerApi.getListEventGuests1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update guests of event
         * @param {EventGuestUpdateRequest} eventGuestUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventGuest(eventGuestUpdateRequest: EventGuestUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseEventGuestRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventGuest(eventGuestUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventGuestControllerApi.updateEventGuest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventGuestControllerApi - factory interface
 * @export
 */
export const EventGuestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventGuestControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add guests into event
         * @param {EventGuestControllerApiAddListEventGuestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListEventGuests(requestParameters: EventGuestControllerApiAddListEventGuestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.addListEventGuests(requestParameters.eventId, requestParameters.eventGuestCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all guests of event
         * @param {EventGuestControllerApiDeleteEventGuestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventGuest(requestParameters: EventGuestControllerApiDeleteEventGuestRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.deleteEventGuest(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete guests of event
         * @param {EventGuestControllerApiDeleteEventGuest1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventGuest1(requestParameters: EventGuestControllerApiDeleteEventGuest1Request, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.deleteEventGuest1(requestParameters.eventGuestKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all guests of event
         * @param {EventGuestControllerApiGetListEventGuestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListEventGuests(requestParameters: EventGuestControllerApiGetListEventGuestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseListEventGuestRespond> {
            return localVarFp.getListEventGuests(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get guest Ã¬nfo of event
         * @param {EventGuestControllerApiGetListEventGuests1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListEventGuests1(requestParameters: EventGuestControllerApiGetListEventGuests1Request, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseEventGuestRespond> {
            return localVarFp.getListEventGuests1(requestParameters.eventId, requestParameters.guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update guests of event
         * @param {EventGuestControllerApiUpdateEventGuestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventGuest(requestParameters: EventGuestControllerApiUpdateEventGuestRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseEventGuestRespond> {
            return localVarFp.updateEventGuest(requestParameters.eventGuestUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addListEventGuests operation in EventGuestControllerApi.
 * @export
 * @interface EventGuestControllerApiAddListEventGuestsRequest
 */
export interface EventGuestControllerApiAddListEventGuestsRequest {
    /**
     * 
     * @type {string}
     * @memberof EventGuestControllerApiAddListEventGuests
     */
    readonly eventId: string

    /**
     * 
     * @type {Array<EventGuestCreationRequest>}
     * @memberof EventGuestControllerApiAddListEventGuests
     */
    readonly eventGuestCreationRequest: Array<EventGuestCreationRequest>
}

/**
 * Request parameters for deleteEventGuest operation in EventGuestControllerApi.
 * @export
 * @interface EventGuestControllerApiDeleteEventGuestRequest
 */
export interface EventGuestControllerApiDeleteEventGuestRequest {
    /**
     * 
     * @type {string}
     * @memberof EventGuestControllerApiDeleteEventGuest
     */
    readonly eventId: string
}

/**
 * Request parameters for deleteEventGuest1 operation in EventGuestControllerApi.
 * @export
 * @interface EventGuestControllerApiDeleteEventGuest1Request
 */
export interface EventGuestControllerApiDeleteEventGuest1Request {
    /**
     * 
     * @type {EventGuestKey}
     * @memberof EventGuestControllerApiDeleteEventGuest1
     */
    readonly eventGuestKey: EventGuestKey
}

/**
 * Request parameters for getListEventGuests operation in EventGuestControllerApi.
 * @export
 * @interface EventGuestControllerApiGetListEventGuestsRequest
 */
export interface EventGuestControllerApiGetListEventGuestsRequest {
    /**
     * 
     * @type {string}
     * @memberof EventGuestControllerApiGetListEventGuests
     */
    readonly eventId: string
}

/**
 * Request parameters for getListEventGuests1 operation in EventGuestControllerApi.
 * @export
 * @interface EventGuestControllerApiGetListEventGuests1Request
 */
export interface EventGuestControllerApiGetListEventGuests1Request {
    /**
     * 
     * @type {string}
     * @memberof EventGuestControllerApiGetListEventGuests1
     */
    readonly eventId: string

    /**
     * 
     * @type {string}
     * @memberof EventGuestControllerApiGetListEventGuests1
     */
    readonly guestId: string
}

/**
 * Request parameters for updateEventGuest operation in EventGuestControllerApi.
 * @export
 * @interface EventGuestControllerApiUpdateEventGuestRequest
 */
export interface EventGuestControllerApiUpdateEventGuestRequest {
    /**
     * 
     * @type {EventGuestUpdateRequest}
     * @memberof EventGuestControllerApiUpdateEventGuest
     */
    readonly eventGuestUpdateRequest: EventGuestUpdateRequest
}

/**
 * EventGuestControllerApi - object-oriented interface
 * @export
 * @class EventGuestControllerApi
 * @extends {BaseAPI}
 */
export class EventGuestControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add guests into event
     * @param {EventGuestControllerApiAddListEventGuestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGuestControllerApi
     */
    public addListEventGuests(requestParameters: EventGuestControllerApiAddListEventGuestsRequest, options?: RawAxiosRequestConfig) {
        return EventGuestControllerApiFp(this.configuration).addListEventGuests(requestParameters.eventId, requestParameters.eventGuestCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete all guests of event
     * @param {EventGuestControllerApiDeleteEventGuestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGuestControllerApi
     */
    public deleteEventGuest(requestParameters: EventGuestControllerApiDeleteEventGuestRequest, options?: RawAxiosRequestConfig) {
        return EventGuestControllerApiFp(this.configuration).deleteEventGuest(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete guests of event
     * @param {EventGuestControllerApiDeleteEventGuest1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGuestControllerApi
     */
    public deleteEventGuest1(requestParameters: EventGuestControllerApiDeleteEventGuest1Request, options?: RawAxiosRequestConfig) {
        return EventGuestControllerApiFp(this.configuration).deleteEventGuest1(requestParameters.eventGuestKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all guests of event
     * @param {EventGuestControllerApiGetListEventGuestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGuestControllerApi
     */
    public getListEventGuests(requestParameters: EventGuestControllerApiGetListEventGuestsRequest, options?: RawAxiosRequestConfig) {
        return EventGuestControllerApiFp(this.configuration).getListEventGuests(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get guest Ã¬nfo of event
     * @param {EventGuestControllerApiGetListEventGuests1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGuestControllerApi
     */
    public getListEventGuests1(requestParameters: EventGuestControllerApiGetListEventGuests1Request, options?: RawAxiosRequestConfig) {
        return EventGuestControllerApiFp(this.configuration).getListEventGuests1(requestParameters.eventId, requestParameters.guestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update guests of event
     * @param {EventGuestControllerApiUpdateEventGuestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventGuestControllerApi
     */
    public updateEventGuest(requestParameters: EventGuestControllerApiUpdateEventGuestRequest, options?: RawAxiosRequestConfig) {
        return EventGuestControllerApiFp(this.configuration).updateEventGuest(requestParameters.eventGuestUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

