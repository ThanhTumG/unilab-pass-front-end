/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseLabResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseListLabMemberResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseString } from '../models';
// @ts-ignore
import type { ErrorApiResponse } from '../models';
// @ts-ignore
import type { LabCreationRequest } from '../models';
// @ts-ignore
import type { LabUpdateRequest } from '../models';
/**
 * LaboratoryControllerApi - axios parameter creator
 * @export
 */
export const LaboratoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new Laboratory
         * @param {LabCreationRequest} labCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLab: async (labCreationRequest: LabCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labCreationRequest' is not null or undefined
            assertParamExists('createLab', 'labCreationRequest', labCreationRequest)
            const localVarPath = `/labs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Laboratory
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLab: async (labId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('deleteLab', 'labId', labId)
            const localVarPath = `/labs/{labId}`
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Laboratories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLabs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/labs/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update existed Laboratory
         * @param {string} labId 
         * @param {LabUpdateRequest} labUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLab: async (labId: string, labUpdateRequest: LabUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('updateLab', 'labId', labId)
            // verify required parameter 'labUpdateRequest' is not null or undefined
            assertParamExists('updateLab', 'labUpdateRequest', labUpdateRequest)
            const localVarPath = `/labs/{labId}`
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LaboratoryControllerApi - functional programming interface
 * @export
 */
export const LaboratoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LaboratoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new Laboratory
         * @param {LabCreationRequest} labCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLab(labCreationRequest: LabCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLab(labCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LaboratoryControllerApi.createLab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Laboratory
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLab(labId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLab(labId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LaboratoryControllerApi.deleteLab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Laboratories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLabs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseListLabMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLabs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LaboratoryControllerApi.getAllLabs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update existed Laboratory
         * @param {string} labId 
         * @param {LabUpdateRequest} labUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLab(labId: string, labUpdateRequest: LabUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLab(labId, labUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LaboratoryControllerApi.updateLab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LaboratoryControllerApi - factory interface
 * @export
 */
export const LaboratoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LaboratoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new Laboratory
         * @param {LaboratoryControllerApiCreateLabRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLab(requestParameters: LaboratoryControllerApiCreateLabRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabResponse> {
            return localVarFp.createLab(requestParameters.labCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Laboratory
         * @param {LaboratoryControllerApiDeleteLabRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLab(requestParameters: LaboratoryControllerApiDeleteLabRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.deleteLab(requestParameters.labId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Laboratories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLabs(options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseListLabMemberResponse> {
            return localVarFp.getAllLabs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update existed Laboratory
         * @param {LaboratoryControllerApiUpdateLabRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLab(requestParameters: LaboratoryControllerApiUpdateLabRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabResponse> {
            return localVarFp.updateLab(requestParameters.labId, requestParameters.labUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLab operation in LaboratoryControllerApi.
 * @export
 * @interface LaboratoryControllerApiCreateLabRequest
 */
export interface LaboratoryControllerApiCreateLabRequest {
    /**
     * 
     * @type {LabCreationRequest}
     * @memberof LaboratoryControllerApiCreateLab
     */
    readonly labCreationRequest: LabCreationRequest
}

/**
 * Request parameters for deleteLab operation in LaboratoryControllerApi.
 * @export
 * @interface LaboratoryControllerApiDeleteLabRequest
 */
export interface LaboratoryControllerApiDeleteLabRequest {
    /**
     * 
     * @type {string}
     * @memberof LaboratoryControllerApiDeleteLab
     */
    readonly labId: string
}

/**
 * Request parameters for updateLab operation in LaboratoryControllerApi.
 * @export
 * @interface LaboratoryControllerApiUpdateLabRequest
 */
export interface LaboratoryControllerApiUpdateLabRequest {
    /**
     * 
     * @type {string}
     * @memberof LaboratoryControllerApiUpdateLab
     */
    readonly labId: string

    /**
     * 
     * @type {LabUpdateRequest}
     * @memberof LaboratoryControllerApiUpdateLab
     */
    readonly labUpdateRequest: LabUpdateRequest
}

/**
 * LaboratoryControllerApi - object-oriented interface
 * @export
 * @class LaboratoryControllerApi
 * @extends {BaseAPI}
 */
export class LaboratoryControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create new Laboratory
     * @param {LaboratoryControllerApiCreateLabRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaboratoryControllerApi
     */
    public createLab(requestParameters: LaboratoryControllerApiCreateLabRequest, options?: RawAxiosRequestConfig) {
        return LaboratoryControllerApiFp(this.configuration).createLab(requestParameters.labCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Laboratory
     * @param {LaboratoryControllerApiDeleteLabRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaboratoryControllerApi
     */
    public deleteLab(requestParameters: LaboratoryControllerApiDeleteLabRequest, options?: RawAxiosRequestConfig) {
        return LaboratoryControllerApiFp(this.configuration).deleteLab(requestParameters.labId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Laboratories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaboratoryControllerApi
     */
    public getAllLabs(options?: RawAxiosRequestConfig) {
        return LaboratoryControllerApiFp(this.configuration).getAllLabs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update existed Laboratory
     * @param {LaboratoryControllerApiUpdateLabRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaboratoryControllerApi
     */
    public updateLab(requestParameters: LaboratoryControllerApiUpdateLabRequest, options?: RawAxiosRequestConfig) {
        return LaboratoryControllerApiFp(this.configuration).updateLab(requestParameters.labId, requestParameters.labUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

