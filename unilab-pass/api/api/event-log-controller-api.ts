/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseEventLogRespond } from '../models';
// @ts-ignore
import type { CustomApiResponseListEventLogRespond } from '../models';
// @ts-ignore
import type { EventLogCreationRequest } from '../models';
/**
 * EventLogControllerApi - axios parameter creator
 * @export
 */
export const EventLogControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new event log
         * @param {EventLogCreationRequest} request 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEventLog: async (request: EventLogCreationRequest, file?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('addEventLog', 'request', request)
            const localVarPath = `/event/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (request !== undefined) { 
                localVarFormParams.append('request', { name: "request", type: "application/json", string: JSON.stringify(request) });
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get log details of event
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventLogDetail: async (logId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logId' is not null or undefined
            assertParamExists('getEventLogDetail', 'logId', logId)
            const localVarPath = `/event/logs/{logId}`
                .replace(`{${"logId"}}`, encodeURIComponent(String(logId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all logs of event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventLogs: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEventLogs', 'eventId', eventId)
            const localVarPath = `/event/{eventId}/logs`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventLogControllerApi - functional programming interface
 * @export
 */
export const EventLogControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventLogControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new event log
         * @param {EventLogCreationRequest} request 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEventLog(request: EventLogCreationRequest, file?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseEventLogRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEventLog(request, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogControllerApi.addEventLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get log details of event
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventLogDetail(logId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseEventLogRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventLogDetail(logId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogControllerApi.getEventLogDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all logs of event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventLogs(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseListEventLogRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventLogs(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogControllerApi.getEventLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventLogControllerApi - factory interface
 * @export
 */
export const EventLogControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventLogControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new event log
         * @param {EventLogControllerApiAddEventLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEventLog(requestParameters: EventLogControllerApiAddEventLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseEventLogRespond> {
            return localVarFp.addEventLog(requestParameters.request, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get log details of event
         * @param {EventLogControllerApiGetEventLogDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventLogDetail(requestParameters: EventLogControllerApiGetEventLogDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseEventLogRespond> {
            return localVarFp.getEventLogDetail(requestParameters.logId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all logs of event
         * @param {EventLogControllerApiGetEventLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventLogs(requestParameters: EventLogControllerApiGetEventLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseListEventLogRespond> {
            return localVarFp.getEventLogs(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEventLog operation in EventLogControllerApi.
 * @export
 * @interface EventLogControllerApiAddEventLogRequest
 */
export interface EventLogControllerApiAddEventLogRequest {
    /**
     * 
     * @type {EventLogCreationRequest}
     * @memberof EventLogControllerApiAddEventLog
     */
    readonly request: EventLogCreationRequest

    /**
     * 
     * @type {any}
     * @memberof EventLogControllerApiAddEventLog
     */
    readonly file?: any
}

/**
 * Request parameters for getEventLogDetail operation in EventLogControllerApi.
 * @export
 * @interface EventLogControllerApiGetEventLogDetailRequest
 */
export interface EventLogControllerApiGetEventLogDetailRequest {
    /**
     * 
     * @type {string}
     * @memberof EventLogControllerApiGetEventLogDetail
     */
    readonly logId: string
}

/**
 * Request parameters for getEventLogs operation in EventLogControllerApi.
 * @export
 * @interface EventLogControllerApiGetEventLogsRequest
 */
export interface EventLogControllerApiGetEventLogsRequest {
    /**
     * 
     * @type {string}
     * @memberof EventLogControllerApiGetEventLogs
     */
    readonly eventId: string
}

/**
 * EventLogControllerApi - object-oriented interface
 * @export
 * @class EventLogControllerApi
 * @extends {BaseAPI}
 */
export class EventLogControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add new event log
     * @param {EventLogControllerApiAddEventLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogControllerApi
     */
    public addEventLog(requestParameters: EventLogControllerApiAddEventLogRequest, options?: RawAxiosRequestConfig) {
        return EventLogControllerApiFp(this.configuration).addEventLog(requestParameters.request, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get log details of event
     * @param {EventLogControllerApiGetEventLogDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogControllerApi
     */
    public getEventLogDetail(requestParameters: EventLogControllerApiGetEventLogDetailRequest, options?: RawAxiosRequestConfig) {
        return EventLogControllerApiFp(this.configuration).getEventLogDetail(requestParameters.logId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all logs of event
     * @param {EventLogControllerApiGetEventLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogControllerApi
     */
    public getEventLogs(requestParameters: EventLogControllerApiGetEventLogsRequest, options?: RawAxiosRequestConfig) {
        return EventLogControllerApiFp(this.configuration).getEventLogs(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }
}

