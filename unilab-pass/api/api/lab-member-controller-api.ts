/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseLabMemberInfoRespond } from '../models';
// @ts-ignore
import type { CustomApiResponseLabMemberResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseListLabMemberResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseString } from '../models';
// @ts-ignore
import type { ErrorApiResponse } from '../models';
// @ts-ignore
import type { InviteManagerForLabRequest } from '../models';
// @ts-ignore
import type { LabMemberCreationRequest } from '../models';
// @ts-ignore
import type { LabMemberUpdateRequest } from '../models';
/**
 * LabMemberControllerApi - axios parameter creator
 * @export
 */
export const LabMemberControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary accept Invite manager into lab
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvite: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('acceptInvite', 'body', body)
            const localVarPath = `/lab-member/acceptInvite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add member into lab
         * @param {LabMemberCreationRequest} request 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLabMember: async (request: LabMemberCreationRequest, file: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('addLabMember', 'request', request)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addLabMember', 'file', file)
            const localVarPath = `/lab-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (request !== undefined) { 
                localVarFormParams.append('request', { name: "request", type: "application/json", string: JSON.stringify(request) });
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete member from lab
         * @param {string} userId 
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (userId: string, labId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteMember', 'userId', userId)
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('deleteMember', 'labId', labId)
            const localVarPath = `/lab-member/labs/{labId}/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get member detailed info
         * @param {string} labId 
         * @param {string} memberId 
         * @param {boolean} isQrCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabMemberDetailInfo: async (labId: string, memberId: string, isQrCode: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('getLabMemberDetailInfo', 'labId', labId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getLabMemberDetailInfo', 'memberId', memberId)
            // verify required parameter 'isQrCode' is not null or undefined
            assertParamExists('getLabMemberDetailInfo', 'isQrCode', isQrCode)
            const localVarPath = `/lab-member/lab/{labId}/member/{memberId}`
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isQrCode !== undefined) {
                localVarQueryParameter['isQrCode'] = isQrCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all members of lab
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabMembers: async (labId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('getLabMembers', 'labId', labId)
            const localVarPath = `/lab-member/labs/{labId}`
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary invite manager into lab
         * @param {InviteManagerForLabRequest} inviteManagerForLabRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteManager: async (inviteManagerForLabRequest: InviteManagerForLabRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteManagerForLabRequest' is not null or undefined
            assertParamExists('inviteManager', 'inviteManagerForLabRequest', inviteManagerForLabRequest)
            const localVarPath = `/lab-member/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteManagerForLabRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update member status of Lab
         * @param {LabMemberUpdateRequest} labMemberUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabMemberStatus: async (labMemberUpdateRequest: LabMemberUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labMemberUpdateRequest' is not null or undefined
            assertParamExists('updateLabMemberStatus', 'labMemberUpdateRequest', labMemberUpdateRequest)
            const localVarPath = `/lab-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labMemberUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabMemberControllerApi - functional programming interface
 * @export
 */
export const LabMemberControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabMemberControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary accept Invite manager into lab
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptInvite(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptInvite(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.acceptInvite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add member into lab
         * @param {LabMemberCreationRequest} request 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLabMember(request: LabMemberCreationRequest, file: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLabMember(request, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.addLabMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete member from lab
         * @param {string} userId 
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(userId: string, labId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(userId, labId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.deleteMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get member detailed info
         * @param {string} labId 
         * @param {string} memberId 
         * @param {boolean} isQrCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabMemberDetailInfo(labId: string, memberId: string, isQrCode: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabMemberInfoRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabMemberDetailInfo(labId, memberId, isQrCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.getLabMemberDetailInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all members of lab
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabMembers(labId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseListLabMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabMembers(labId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.getLabMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary invite manager into lab
         * @param {InviteManagerForLabRequest} inviteManagerForLabRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteManager(inviteManagerForLabRequest: InviteManagerForLabRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteManager(inviteManagerForLabRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.inviteManager']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update member status of Lab
         * @param {LabMemberUpdateRequest} labMemberUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabMemberStatus(labMemberUpdateRequest: LabMemberUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabMemberStatus(labMemberUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabMemberControllerApi.updateLabMemberStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LabMemberControllerApi - factory interface
 * @export
 */
export const LabMemberControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabMemberControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary accept Invite manager into lab
         * @param {LabMemberControllerApiAcceptInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvite(requestParameters: LabMemberControllerApiAcceptInviteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabMemberResponse> {
            return localVarFp.acceptInvite(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add member into lab
         * @param {LabMemberControllerApiAddLabMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLabMember(requestParameters: LabMemberControllerApiAddLabMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.addLabMember(requestParameters.request, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete member from lab
         * @param {LabMemberControllerApiDeleteMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(requestParameters: LabMemberControllerApiDeleteMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.deleteMember(requestParameters.userId, requestParameters.labId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get member detailed info
         * @param {LabMemberControllerApiGetLabMemberDetailInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabMemberDetailInfo(requestParameters: LabMemberControllerApiGetLabMemberDetailInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabMemberInfoRespond> {
            return localVarFp.getLabMemberDetailInfo(requestParameters.labId, requestParameters.memberId, requestParameters.isQrCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all members of lab
         * @param {LabMemberControllerApiGetLabMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabMembers(requestParameters: LabMemberControllerApiGetLabMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseListLabMemberResponse> {
            return localVarFp.getLabMembers(requestParameters.labId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary invite manager into lab
         * @param {LabMemberControllerApiInviteManagerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteManager(requestParameters: LabMemberControllerApiInviteManagerRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.inviteManager(requestParameters.inviteManagerForLabRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update member status of Lab
         * @param {LabMemberControllerApiUpdateLabMemberStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabMemberStatus(requestParameters: LabMemberControllerApiUpdateLabMemberStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabMemberResponse> {
            return localVarFp.updateLabMemberStatus(requestParameters.labMemberUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptInvite operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiAcceptInviteRequest
 */
export interface LabMemberControllerApiAcceptInviteRequest {
    /**
     * 
     * @type {string}
     * @memberof LabMemberControllerApiAcceptInvite
     */
    readonly body: string
}

/**
 * Request parameters for addLabMember operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiAddLabMemberRequest
 */
export interface LabMemberControllerApiAddLabMemberRequest {
    /**
     * 
     * @type {LabMemberCreationRequest}
     * @memberof LabMemberControllerApiAddLabMember
     */
    readonly request: LabMemberCreationRequest

    /**
     * 
     * @type {any}
     * @memberof LabMemberControllerApiAddLabMember
     */
    readonly file: any
}

/**
 * Request parameters for deleteMember operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiDeleteMemberRequest
 */
export interface LabMemberControllerApiDeleteMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof LabMemberControllerApiDeleteMember
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof LabMemberControllerApiDeleteMember
     */
    readonly labId: string
}

/**
 * Request parameters for getLabMemberDetailInfo operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiGetLabMemberDetailInfoRequest
 */
export interface LabMemberControllerApiGetLabMemberDetailInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof LabMemberControllerApiGetLabMemberDetailInfo
     */
    readonly labId: string

    /**
     * 
     * @type {string}
     * @memberof LabMemberControllerApiGetLabMemberDetailInfo
     */
    readonly memberId: string

    /**
     * 
     * @type {boolean}
     * @memberof LabMemberControllerApiGetLabMemberDetailInfo
     */
    readonly isQrCode: boolean
}

/**
 * Request parameters for getLabMembers operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiGetLabMembersRequest
 */
export interface LabMemberControllerApiGetLabMembersRequest {
    /**
     * 
     * @type {string}
     * @memberof LabMemberControllerApiGetLabMembers
     */
    readonly labId: string
}

/**
 * Request parameters for inviteManager operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiInviteManagerRequest
 */
export interface LabMemberControllerApiInviteManagerRequest {
    /**
     * 
     * @type {InviteManagerForLabRequest}
     * @memberof LabMemberControllerApiInviteManager
     */
    readonly inviteManagerForLabRequest: InviteManagerForLabRequest
}

/**
 * Request parameters for updateLabMemberStatus operation in LabMemberControllerApi.
 * @export
 * @interface LabMemberControllerApiUpdateLabMemberStatusRequest
 */
export interface LabMemberControllerApiUpdateLabMemberStatusRequest {
    /**
     * 
     * @type {LabMemberUpdateRequest}
     * @memberof LabMemberControllerApiUpdateLabMemberStatus
     */
    readonly labMemberUpdateRequest: LabMemberUpdateRequest
}

/**
 * LabMemberControllerApi - object-oriented interface
 * @export
 * @class LabMemberControllerApi
 * @extends {BaseAPI}
 */
export class LabMemberControllerApi extends BaseAPI {
    /**
     * 
     * @summary accept Invite manager into lab
     * @param {LabMemberControllerApiAcceptInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public acceptInvite(requestParameters: LabMemberControllerApiAcceptInviteRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).acceptInvite(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add member into lab
     * @param {LabMemberControllerApiAddLabMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public addLabMember(requestParameters: LabMemberControllerApiAddLabMemberRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).addLabMember(requestParameters.request, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete member from lab
     * @param {LabMemberControllerApiDeleteMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public deleteMember(requestParameters: LabMemberControllerApiDeleteMemberRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).deleteMember(requestParameters.userId, requestParameters.labId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get member detailed info
     * @param {LabMemberControllerApiGetLabMemberDetailInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public getLabMemberDetailInfo(requestParameters: LabMemberControllerApiGetLabMemberDetailInfoRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).getLabMemberDetailInfo(requestParameters.labId, requestParameters.memberId, requestParameters.isQrCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all members of lab
     * @param {LabMemberControllerApiGetLabMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public getLabMembers(requestParameters: LabMemberControllerApiGetLabMembersRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).getLabMembers(requestParameters.labId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary invite manager into lab
     * @param {LabMemberControllerApiInviteManagerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public inviteManager(requestParameters: LabMemberControllerApiInviteManagerRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).inviteManager(requestParameters.inviteManagerForLabRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update member status of Lab
     * @param {LabMemberControllerApiUpdateLabMemberStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabMemberControllerApi
     */
    public updateLabMemberStatus(requestParameters: LabMemberControllerApiUpdateLabMemberStatusRequest, options?: RawAxiosRequestConfig) {
        return LabMemberControllerApiFp(this.configuration).updateLabMemberStatus(requestParameters.labMemberUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

