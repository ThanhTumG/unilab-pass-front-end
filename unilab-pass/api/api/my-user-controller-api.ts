/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseListMyUserResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseMyUserResponse } from '../models';
// @ts-ignore
import type { CustomApiResponseString } from '../models';
// @ts-ignore
import type { ErrorApiResponse } from '../models';
// @ts-ignore
import type { MyUserCreationRequest } from '../models';
// @ts-ignore
import type { MyUserUpdateRequest } from '../models';
/**
 * MyUserControllerApi - axios parameter creator
 * @export
 */
export const MyUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register a new user
         * @param {MyUserCreationRequest} myUserCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMyUser: async (myUserCreationRequest: MyUserCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'myUserCreationRequest' is not null or undefined
            assertParamExists('createMyUser', 'myUserCreationRequest', myUserCreationRequest)
            const localVarPath = `/users/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(myUserCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteMyUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get My Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/myInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMyUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {string} userId 
         * @param {MyUserUpdateRequest} request 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyUser: async (userId: string, request: MyUserUpdateRequest, file?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateMyUser', 'userId', userId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('updateMyUser', 'request', request)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (request !== undefined) { 
                localVarFormParams.append('request', { name: "request", type: "application/json", string: JSON.stringify(request) });
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MyUserControllerApi - functional programming interface
 * @export
 */
export const MyUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MyUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Register a new user
         * @param {MyUserCreationRequest} myUserCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMyUser(myUserCreationRequest: MyUserCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseMyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMyUser(myUserCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MyUserControllerApi.createMyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMyUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMyUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MyUserControllerApi.deleteMyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get My Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseMyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MyUserControllerApi.getMyInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseMyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MyUserControllerApi.getMyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseListMyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MyUserControllerApi.getMyUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {string} userId 
         * @param {MyUserUpdateRequest} request 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyUser(userId: string, request: MyUserUpdateRequest, file?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseMyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyUser(userId, request, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MyUserControllerApi.updateMyUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MyUserControllerApi - factory interface
 * @export
 */
export const MyUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MyUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Register a new user
         * @param {MyUserControllerApiCreateMyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMyUser(requestParameters: MyUserControllerApiCreateMyUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseMyUserResponse> {
            return localVarFp.createMyUser(requestParameters.myUserCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {MyUserControllerApiDeleteMyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyUser(requestParameters: MyUserControllerApiDeleteMyUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.deleteMyUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get My Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyInfo(options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseMyUserResponse> {
            return localVarFp.getMyInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User
         * @param {MyUserControllerApiGetMyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUser(requestParameters: MyUserControllerApiGetMyUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseMyUserResponse> {
            return localVarFp.getMyUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUsers(options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseListMyUserResponse> {
            return localVarFp.getMyUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {MyUserControllerApiUpdateMyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyUser(requestParameters: MyUserControllerApiUpdateMyUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseMyUserResponse> {
            return localVarFp.updateMyUser(requestParameters.userId, requestParameters.request, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMyUser operation in MyUserControllerApi.
 * @export
 * @interface MyUserControllerApiCreateMyUserRequest
 */
export interface MyUserControllerApiCreateMyUserRequest {
    /**
     * 
     * @type {MyUserCreationRequest}
     * @memberof MyUserControllerApiCreateMyUser
     */
    readonly myUserCreationRequest: MyUserCreationRequest
}

/**
 * Request parameters for deleteMyUser operation in MyUserControllerApi.
 * @export
 * @interface MyUserControllerApiDeleteMyUserRequest
 */
export interface MyUserControllerApiDeleteMyUserRequest {
    /**
     * 
     * @type {string}
     * @memberof MyUserControllerApiDeleteMyUser
     */
    readonly userId: string
}

/**
 * Request parameters for getMyUser operation in MyUserControllerApi.
 * @export
 * @interface MyUserControllerApiGetMyUserRequest
 */
export interface MyUserControllerApiGetMyUserRequest {
    /**
     * 
     * @type {string}
     * @memberof MyUserControllerApiGetMyUser
     */
    readonly userId: string
}

/**
 * Request parameters for updateMyUser operation in MyUserControllerApi.
 * @export
 * @interface MyUserControllerApiUpdateMyUserRequest
 */
export interface MyUserControllerApiUpdateMyUserRequest {
    /**
     * 
     * @type {string}
     * @memberof MyUserControllerApiUpdateMyUser
     */
    readonly userId: string

    /**
     * 
     * @type {MyUserUpdateRequest}
     * @memberof MyUserControllerApiUpdateMyUser
     */
    readonly request: MyUserUpdateRequest

    /**
     * 
     * @type {any}
     * @memberof MyUserControllerApiUpdateMyUser
     */
    readonly file?: any
}

/**
 * MyUserControllerApi - object-oriented interface
 * @export
 * @class MyUserControllerApi
 * @extends {BaseAPI}
 */
export class MyUserControllerApi extends BaseAPI {
    /**
     * 
     * @summary Register a new user
     * @param {MyUserControllerApiCreateMyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyUserControllerApi
     */
    public createMyUser(requestParameters: MyUserControllerApiCreateMyUserRequest, options?: RawAxiosRequestConfig) {
        return MyUserControllerApiFp(this.configuration).createMyUser(requestParameters.myUserCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {MyUserControllerApiDeleteMyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyUserControllerApi
     */
    public deleteMyUser(requestParameters: MyUserControllerApiDeleteMyUserRequest, options?: RawAxiosRequestConfig) {
        return MyUserControllerApiFp(this.configuration).deleteMyUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get My Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyUserControllerApi
     */
    public getMyInfo(options?: RawAxiosRequestConfig) {
        return MyUserControllerApiFp(this.configuration).getMyInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User
     * @param {MyUserControllerApiGetMyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyUserControllerApi
     */
    public getMyUser(requestParameters: MyUserControllerApiGetMyUserRequest, options?: RawAxiosRequestConfig) {
        return MyUserControllerApiFp(this.configuration).getMyUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyUserControllerApi
     */
    public getMyUsers(options?: RawAxiosRequestConfig) {
        return MyUserControllerApiFp(this.configuration).getMyUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {MyUserControllerApiUpdateMyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyUserControllerApi
     */
    public updateMyUser(requestParameters: MyUserControllerApiUpdateMyUserRequest, options?: RawAxiosRequestConfig) {
        return MyUserControllerApiFp(this.configuration).updateMyUser(requestParameters.userId, requestParameters.request, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}

