/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseObject } from '../models';
// @ts-ignore
import type { CustomApiResponseString } from '../models';
/**
 * ModelControllerApi - axios parameter creator
 * @export
 */
export const ModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/model/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify
         * @param {any} image1 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify: async (image1: any, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image1' is not null or undefined
            assertParamExists('verify', 'image1', image1)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('verify', 'userId', userId)
            const localVarPath = `/model/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image1 !== undefined) { 
                localVarFormParams.append('image1', image1 as any);
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('userId', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelControllerApi - functional programming interface
 * @export
 */
export const ModelControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelControllerApi.healthcheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify
         * @param {any} image1 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify(image1: any, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(image1, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelControllerApi.verify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ModelControllerApi - factory interface
 * @export
 */
export const ModelControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck(options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify
         * @param {ModelControllerApiVerifyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify(requestParameters: ModelControllerApiVerifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseObject> {
            return localVarFp.verify(requestParameters.image1, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verify operation in ModelControllerApi.
 * @export
 * @interface ModelControllerApiVerifyRequest
 */
export interface ModelControllerApiVerifyRequest {
    /**
     * 
     * @type {any}
     * @memberof ModelControllerApiVerify
     */
    readonly image1: any

    /**
     * 
     * @type {string}
     * @memberof ModelControllerApiVerify
     */
    readonly userId: string
}

/**
 * ModelControllerApi - object-oriented interface
 * @export
 * @class ModelControllerApi
 * @extends {BaseAPI}
 */
export class ModelControllerApi extends BaseAPI {
    /**
     * 
     * @summary healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelControllerApi
     */
    public healthcheck(options?: RawAxiosRequestConfig) {
        return ModelControllerApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify
     * @param {ModelControllerApiVerifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelControllerApi
     */
    public verify(requestParameters: ModelControllerApiVerifyRequest, options?: RawAxiosRequestConfig) {
        return ModelControllerApiFp(this.configuration).verify(requestParameters.image1, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}

