/* tslint:disable */
/* eslint-disable */
/**
 * My REST API
 * Some custom description of API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomApiResponseLabEventRespond } from '../models';
// @ts-ignore
import type { CustomApiResponseListLabEventRespond } from '../models';
// @ts-ignore
import type { CustomApiResponseString } from '../models';
// @ts-ignore
import type { LabEventCreationRequest } from '../models';
// @ts-ignore
import type { LabEventUpdateRequest } from '../models';
/**
 * EventControllerApi - axios parameter creator
 * @export
 */
export const EventControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new event to lab
         * @param {LabEventCreationRequest} labEventCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (labEventCreationRequest: LabEventCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labEventCreationRequest' is not null or undefined
            assertParamExists('createEvent', 'labEventCreationRequest', labEventCreationRequest)
            const localVarPath = `/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labEventCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEvent', 'eventId', eventId)
            const localVarPath = `/event/delete/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get lab\'s current event
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentEvent: async (labId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('getCurrentEvent', 'labId', labId)
            const localVarPath = `/event/current/{labId}`
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all lab\'s events
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (labId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labId' is not null or undefined
            assertParamExists('getEvents', 'labId', labId)
            const localVarPath = `/event/{labId}`
                .replace(`{${"labId"}}`, encodeURIComponent(String(labId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event\'s info
         * @param {LabEventUpdateRequest} labEventUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent: async (labEventUpdateRequest: LabEventUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labEventUpdateRequest' is not null or undefined
            assertParamExists('updateEvent', 'labEventUpdateRequest', labEventUpdateRequest)
            const localVarPath = `/event/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labEventUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventControllerApi - functional programming interface
 * @export
 */
export const EventControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new event to lab
         * @param {LabEventCreationRequest} labEventCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(labEventCreationRequest: LabEventCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(labEventCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.createEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete event
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.deleteEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get lab\'s current event
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentEvent(labId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabEventRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentEvent(labId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.getCurrentEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary View all lab\'s events
         * @param {string} labId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(labId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseListLabEventRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(labId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.getEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update event\'s info
         * @param {LabEventUpdateRequest} labEventUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvent(labEventUpdateRequest: LabEventUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomApiResponseLabEventRespond>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(labEventUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.updateEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventControllerApi - factory interface
 * @export
 */
export const EventControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new event to lab
         * @param {EventControllerApiCreateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(requestParameters: EventControllerApiCreateEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.createEvent(requestParameters.labEventCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete event
         * @param {EventControllerApiDeleteEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(requestParameters: EventControllerApiDeleteEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseString> {
            return localVarFp.deleteEvent(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get lab\'s current event
         * @param {EventControllerApiGetCurrentEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentEvent(requestParameters: EventControllerApiGetCurrentEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabEventRespond> {
            return localVarFp.getCurrentEvent(requestParameters.labId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all lab\'s events
         * @param {EventControllerApiGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(requestParameters: EventControllerApiGetEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseListLabEventRespond> {
            return localVarFp.getEvents(requestParameters.labId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event\'s info
         * @param {EventControllerApiUpdateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent(requestParameters: EventControllerApiUpdateEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomApiResponseLabEventRespond> {
            return localVarFp.updateEvent(requestParameters.labEventUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEvent operation in EventControllerApi.
 * @export
 * @interface EventControllerApiCreateEventRequest
 */
export interface EventControllerApiCreateEventRequest {
    /**
     * 
     * @type {LabEventCreationRequest}
     * @memberof EventControllerApiCreateEvent
     */
    readonly labEventCreationRequest: LabEventCreationRequest
}

/**
 * Request parameters for deleteEvent operation in EventControllerApi.
 * @export
 * @interface EventControllerApiDeleteEventRequest
 */
export interface EventControllerApiDeleteEventRequest {
    /**
     * 
     * @type {string}
     * @memberof EventControllerApiDeleteEvent
     */
    readonly eventId: string
}

/**
 * Request parameters for getCurrentEvent operation in EventControllerApi.
 * @export
 * @interface EventControllerApiGetCurrentEventRequest
 */
export interface EventControllerApiGetCurrentEventRequest {
    /**
     * 
     * @type {string}
     * @memberof EventControllerApiGetCurrentEvent
     */
    readonly labId: string
}

/**
 * Request parameters for getEvents operation in EventControllerApi.
 * @export
 * @interface EventControllerApiGetEventsRequest
 */
export interface EventControllerApiGetEventsRequest {
    /**
     * 
     * @type {string}
     * @memberof EventControllerApiGetEvents
     */
    readonly labId: string
}

/**
 * Request parameters for updateEvent operation in EventControllerApi.
 * @export
 * @interface EventControllerApiUpdateEventRequest
 */
export interface EventControllerApiUpdateEventRequest {
    /**
     * 
     * @type {LabEventUpdateRequest}
     * @memberof EventControllerApiUpdateEvent
     */
    readonly labEventUpdateRequest: LabEventUpdateRequest
}

/**
 * EventControllerApi - object-oriented interface
 * @export
 * @class EventControllerApi
 * @extends {BaseAPI}
 */
export class EventControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add new event to lab
     * @param {EventControllerApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public createEvent(requestParameters: EventControllerApiCreateEventRequest, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).createEvent(requestParameters.labEventCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete event
     * @param {EventControllerApiDeleteEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public deleteEvent(requestParameters: EventControllerApiDeleteEventRequest, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).deleteEvent(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get lab\'s current event
     * @param {EventControllerApiGetCurrentEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getCurrentEvent(requestParameters: EventControllerApiGetCurrentEventRequest, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getCurrentEvent(requestParameters.labId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View all lab\'s events
     * @param {EventControllerApiGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEvents(requestParameters: EventControllerApiGetEventsRequest, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEvents(requestParameters.labId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event\'s info
     * @param {EventControllerApiUpdateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public updateEvent(requestParameters: EventControllerApiUpdateEventRequest, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).updateEvent(requestParameters.labEventUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

